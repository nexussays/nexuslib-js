<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta charset="utf-8">
<title>Javascript Editor</title>
<link href="./favicon.ico" rel="Shortcut Icon" />
<link href="./styles/main.css" rel="stylesheet" type="text/css" />
<script src="../bin/nnet-with-require.js" type="text/javascript"></script>
<script src="../bin/debug.js" type="text/javascript"></script>
<script src="webtest.js" type="text/javascript"></script>
<style type="text/css">
textarea
{
   width: 95%;
   display: block;
   font-family: Consolas, "Courier New", monospace;
   font-size: 1em;
}
textarea#eval_results
{
   color: #fff;
   background-color: #444;
   border: 1px solid #000;
   width: 100%;
}
input[type="text"]
{
   font-family:Consolas;
}
div.buttons
{
   clear: both;
   margin: .5em auto 0;
}
button img
{
   margin-bottom: -3px;
}
img.hidden
{
   display: none;
}
#waiting
{
   padding: 0 .5em;
}
#output
{
   font-family: Consolas;
}
</style>
<script type="text/javascript">
require([
   "nnet/get",
   "nnet/cookie",
   "nnet/element",
   "nnet/debug/debug"
], function(get, Cookie, Element, Debug){

var execute_text, showmembers, showoutput, catchtabs, output_executiondetails;
var waitingImage;
document.load.debug = function()
{
   //create the dropdown menu
   CreateMenu("nav", Sections.Javascript.Menu);
   var cookie = Cookie.getJSON("EditorPreferences");
   
   //get the textarea with the code
   execute_text = get.id("#execute_text");
   execute_text.onkeydown = execute_text_onkeydown;
   execute_text.value = (cookie && cookie.execute_text) ? unescape(cookie.execute_text) : "";
   //wireup event handlers
   get.id("#execute_go").onclick = __go;
   output_executiondetails = get.id("output_executiondetails");
   
   waitingImage = get.id("#waiting");
   
   //setup options
   //default to verbose output (this value is actually checked in __go)
   showmembers = get.id("#showmembers");
   showmembers.checked = (cookie && cookie.showmembers) ? cookie.showmembers : false;
   //show the output of the eval
   showoutput = get.id("#showoutput");
   showoutput.checked = (cookie && cookie.showoutput) ? cookie.showoutput : false;
   //default to not capturing tabs (ie - tabbing will take you out of the textarea and to the next form element)
   catchtabs = get.id("#catchtabs");
   catchtabs.checked = (cookie && cookie.catchtabs) ? cookie.catchtabs : false;
   
   //set the output source for Debug results
   Debug.outputSource = get.id("#output");
   Debug.allowMultiple = true;
   
   //update the displayed HTML with the data actually on the page
   //update the cookie which stores preference values
   __updateTestingHTMLAndCookie();
   
   var toggle = get.id("#html_toggle_link");
   toggle.onclick = function()
   {
      var html = get.id("#testinghtml");
      if(html.style.display == "none")
      {
         html.style.display = "block";
         this.innerHTML = "Hide available testing HTML&#8682;";
      }
      else
      {
         html.style.display = "none";
         this.innerHTML = "Show available testing HTML&#8681;";
      }
   }
   toggle.onclick();
}
function __updateTestingHTMLAndCookie()
{
   var testinghtml = get.id("#testinghtml");
   var temp = get.id("#extra");
   testinghtml.innerHTML = Element.getOuterHTML(temp, true).replace(/\t/g,"   ");
   
   //update cookie
   var prefs = 
   {
      "showmembers" : showmembers.checked,
      "showoutput" : showoutput.checked,
      "catchtabs" : catchtabs.checked,
      "execute_text" : escape(execute_text.value)
   };
   Cookie.writeJSON("EditorPreferences", prefs, 30..days());
}
function execute_text_onkeydown(evt)
{
   var e = NNet.Event(evt), tab = "   ", start = execute_text.selectionStart, end = execute_text.selectionEnd;
   
   //only catch tabs if the corresponding checkbox is checked
   if(catchtabs.checked && e.key.code == NNet.Event.keys.TAB)
   {
      //prevent the default action
      e.preventDefault();
      
      if(e.key.shift)
      {
         execute_text.value = execute_text.value.substr(0, start) + tab +
            execute_text.value.substr(end, execute_text.value.length);
      }
      else
      {
         execute_text.value = execute_text.value.substr(0, start) + tab +
            execute_text.value.substr(end, execute_text.value.length);
      }
         
      execute_text.focus();
      
      execute_text.setSelectionRange(start + tab.length, start + tab.length);
   }
   
   if(e.key.ctrl && (e.key.code == NNet.Event.keys.ENTER || e.key.value == "S"))
   {
      //prevent the default action
      e.preventDefault();
      
      get.id("#execute_go").onclick();
   }
}
function __go()
{
   //determine properties
   Debug.showAllMembers = showmembers.checked;
   //Debug.allowMultiple = allowmultiple.checked;
   
   //display the waiting image
   Element.removeCssClass(waitingImage, "hidden");
      
   //reset html of output area so that is not included in any code executed below
   //(eg - if the debug output element is called using get() in the debug code)
   Debug.clear();
   
   setTimeout(function()
   {
      var end, start = new Date(), result;
      try
      {
         //execute the code in the textarea
         result = eval(execute_text.value);
         if(result != null && showoutput.checked)
         {
            out("<textarea id=\"eval_results\" readonly=\"readonly\" rows=\"3\" cols=\"10\">" + result + "</textarea>");
         }
      }
      catch(ex)
      {
         Debug.Error(ex, true);
      }
      //end the timer and hide the waiting image
      end = new Date();

      Element.addCssClass(waitingImage, "hidden");
      
      //update the testing HTML to reflect any changes
      //update the cookie with updated preferences
      __updateTestingHTMLAndCookie();
      
      output_executiondetails.innerHTML = (end-start)/1000 + " seconds; " + execute_text.value.length + " characters";
   }, 100);
}
function el(x, props)
{
   Debug.Element(x, props);
}
function obj(x, props)
{
   Debug.Object(x, props);
}
function simp(x, props)
{
   Debug.Simple(x, props);
}
function loop(times, code, context)
{
   simp(Benchmark.loop(times, code, context), true);
}
function out()
{
   //"convert" the items to strings so that null and undefined are actually written
   Debug.write(Array.prototype.map.call(arguments, function(x){return x += "";}).join("<br />"), false);
}
});</script>
</head>
<body>
<div id="nojavascript_error">
   <p>Javascript must be enabled for this page to function properly.</p>
   <p>Javascript has either been disabled or is not properly supported in your browser.</p>
</div>
<script type="text/javascript">
(function()
{
   var del = document.getElementById("nojavascript_error");
   del.parentNode.removeChild(del);
})()
</script>
<div id="nav"></div>
<h1>Javascript Editor</h1>
<fieldset>
   <legend>Execute and Debug Code</legend>
   <div>
      <ul class="inline">
         <li>
            <label for="showmembers"><input type="checkbox" id="showmembers" />show detailed debugging</label>
         </li>
         <li>
            <label for="showoutput"><input type="checkbox" id="showoutput" />show results of code execution</label>
         </li>
         <li>
            <label for="catchtabs"><input type="checkbox" id="catchtabs" />allow tabs in textarea</label>
         </li>
      </ul>
      <textarea rows="13" cols="20" spellcheck="false" id="execute_text"></textarea>
      <ul class="notes">
         <li>el(x) == Debug.Element(x)</li>
         <li>obj(x) == Debug.Object(x)</li>
         <li>simp(x) == Debug.Simple(x)</li>
         <li>out(x, x+1, &#0133, x+n) == Debug.write([x, x+1, &#0133, x+n].join("&lt;br /&gt;"), false)</li>
      </ul>
   </div>
   <div class="buttons">
      <button type="button" id="execute_go">
         Execute <img src="./images/silk/resultset_next.png" alt="Execute" />
      </button>
      <img src="./images.waiting_squares.gif" id="waiting" class="hidden" alt="" />
   </div>
</fieldset>
<div>
<span id="html_toggle_link" class="link"></span>
<pre id="testinghtml"></pre>
<div id="extra" style="display:none;">
   <ul id="extra_ul" class="class_3 otherclass">
      <li>foo</li>
      <li class="class"><span id="extra_span">bar</span></li>
      <li class="class2">foobar</li>
   </ul>
   <form id="form" action="../httptest.aspx?query=string" method="post">
      <fieldset>
         <a href="http://www.example.com/file.pdf" rel=".pdf">testing</a>
         <a href="http://www.example.com/file.exe" rel="dpdf">testing</a>
         <input type="text" name="extra_text" value="foobar" />
         <input type="text" name="extra_select" value="samename" />
         <select name="no_default">
            <option value="one">one</option>
            <option value="two">two</option>
         </select>
         <input type="hidden" name="extra_radio" value="messStuffUp" />
         <textarea cols="10" rows="2">testing text</textarea>
         <div>
            <!-- comment -->
            <input type="radio" name="extra_radio" value="first radio" id="extra_radio_1" />
            <input type="radio" name="extra_radio" value="second radio" checked="checked" />
            <input type="radio" name="extra_radio" value="third radio" />
            <select name="extra_select">
               <optgroup label="items">
                  <option value="">I</option>
                  <option value="II">II</option>
                  <option value="III" selected="selected">III</option>
               </optgroup>
            </select>
         </div>
         <input type="checkbox" name="extra_check" value="ValueIsTrue" />
         <input type="checkbox" name="extra_check" />
      </fieldset>
   </form>
   <span id="extra_span1" class="class2 class-3">this is span 1</span>
   <span id="extra_span2" class="class-3">this is span 2</span>
</div>
</div>
<hr />
<h4>Output: <span id="output_executiondetails"></span></h4>
<div id="output"></div>
</body>
</html>